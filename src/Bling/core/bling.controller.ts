// src/Bling/Core/bling.controller.ts
import { Controller, Post, Body, Headers, Logger } from '@nestjs/common';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { styledLog, logSeparator } from '../../utils/log-style.util';

/**
 * Enum centralizado para os tipos de eventos do Bling
 */
export enum BlingEventType {
  UPSERT = 'upsert',
  DELETED = 'deleted',
}

@Controller('bling/core')
export class BlingController {
  private readonly logger = new Logger(BlingController.name);

  constructor(private readonly eventEmitter: EventEmitter2) {}

  /**
   * üì© Webhook principal do Bling
   * Recebe eventos de qualquer recurso (produtos, contatos, vendas, etc.)
   * e emite eventos internos no sistema para os m√≥dulos ouvintes.
   */
  @Post('webhook')
  async handleWebhook(@Body() body: any, @Headers() headers: Record<string, string>) {
    logSeparator('WEBHOOK BLING', 'magenta');

    const payload = body.data && typeof body.data === 'object' ? body.data : body;
    const evento = body.event || 'desconhecido';
    const recurso = body.resource || 'desconhecido';
    const id = Number(payload.id);

    styledLog(
      'webhook',
      `üì¨ Evento recebido do Bling ‚Üí Tipo: ${evento} | Recurso: ${recurso} | ID: ${id}`,
      'cyan',
    );

    // üö® Valida√ß√£o
    if (!id || isNaN(id)) {
      styledLog('warning', '‚ö†Ô∏è ID inv√°lido ou ausente no payload.', 'brightYellow');
      return { ok: false, message: 'ID inv√°lido' };
    }

    // üóëÔ∏è Exclus√£o
    const exclusao =
      evento?.includes(BlingEventType.DELETED) ||
      (Object.keys(payload).length === 1 && 'id' in payload);

    if (exclusao) {
      styledLog('webhook', `üóëÔ∏è Recurso removido no Bling (ID=${id})`, 'red');
      this.eventEmitter.emit(`bling.${recurso}.${BlingEventType.DELETED}`, { id, recurso });
      return { ok: true, message: 'Evento de exclus√£o processado' };
    }

    // ‚ôªÔ∏è Cria√ß√£o ou atualiza√ß√£o
    styledLog('webhook', `‚ôªÔ∏è Recurso criado ou atualizado (ID=${id})`, 'green');
    this.eventEmitter.emit(`bling.${recurso}.${BlingEventType.UPSERT}`, { id, payload });

    return { ok: true, message: 'Evento emitido com sucesso' };
  }
}

/*
üóì 24/10/2025 - 22:10
‚ôªÔ∏è Refatora√ß√£o: logs em portugu√™s e enum de eventos padronizado.
--------------------------------------------
üìò L√≥gica:
- Recebe webhooks universais do Bling (para qualquer tipo de recurso).
- Emite eventos internos no formato `bling.<recurso>.<a√ß√£o>`.
- A√ß√µes poss√≠veis: `upsert` (cria√ß√£o/atualiza√ß√£o) e `deleted` (remo√ß√£o).
- Totalmente desacoplado, permitindo que cada m√≥dulo (produtos, usu√°rios, vendas)
  escute apenas os eventos que lhe interessam via @OnEvent().
by: gabbu (github: gabriellesote) ‡¥¶‡µç‡¥¶‡¥ø(Àµ ‚Ä¢ÃÄ ·¥ó - Àµ ) ‚úß +
*/
