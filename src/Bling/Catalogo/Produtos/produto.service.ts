// src/Bling/catalogo/produtos/produto.service.ts
import { Injectable, Logger } from '@nestjs/common';
import { blingCatalogHttp } from '../../utils/bling-http';

@Injectable()
export class ProdutoService {
  private readonly logger = new Logger(ProdutoService.name);

  /**
   * Busca produtos do Bling com suporte a pagina√ß√£o.
   * Retorna produtos da p√°gina atual + se h√° pr√≥xima p√°gina.
   */
  async getProducts(page = 1) {
    try {
      const response = await blingCatalogHttp.get('/produtos', {
        params: { pagina: page, criterio: 5 },
        headers: { Accept: 'application/json' },
      });

      const produtos = response.data?.data ?? [];
      const hasNext = response.data?.hasNext ?? false;

      this.logger.log(
        `üì¶ P√°gina ${page} carregada (${produtos.length} produtos) | hasNext=${hasNext}`,
      );

      return { produtos, hasNext };
    } catch (err: any) {
      this.logger.error(
        '‚ùå Erro ao buscar produtos:',
        err.response?.data || err.message,
      );
      return { produtos: [], hasNext: false };
    }
  }
}

/*
üóì 24/10/2025 - 16:45
‚ú® Extra√ß√£o da l√≥gica de produtos do core ‚Üí m√≥dulo dedicado.
--------------------------------------------
üìò L√≥gica:
- Requisi√ß√µes diretas √† API Bling (cat√°logo de produtos).
- Suporte a pagina√ß√£o e logs padronizados.
- Respons√°vel apenas por comunica√ß√£o HTTP.
by: gabbu (github: gabriellesote) ‡¥¶‡µç‡¥¶‡¥ø(Àµ ‚Ä¢ÃÄ ·¥ó - Àµ ) ‚úß
*/
